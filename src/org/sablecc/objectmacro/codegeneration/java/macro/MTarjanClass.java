/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;

import java.util.*;

public class MTarjanClass {

  private final List<Object> ePackageDeclaration = new LinkedList<Object>();
  private final List<Object> eImportJavaUtil = new LinkedList<Object>();

  public MTarjanClass() {
  }

  public MPackageDeclaration newPackageDeclaration(String pPackageName) {
    MPackageDeclaration lPackageDeclaration = new MPackageDeclaration(pPackageName);
    this.ePackageDeclaration.add(lPackageDeclaration);
    return lPackageDeclaration;
  }

  public MImportJavaUtil newImportJavaUtil() {
    MImportJavaUtil lImportJavaUtil = new MImportJavaUtil();
    this.eImportJavaUtil.add(lImportJavaUtil);
    return lImportJavaUtil;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(new MHeader().toString());
    if(this.ePackageDeclaration.size() > 0) {
      sb.append(System.getProperty("line.separator"));
    }
    for(Object oPackageDeclaration : this.ePackageDeclaration) {
      sb.append(oPackageDeclaration.toString());
    }
    for(Object oImportJavaUtil : this.eImportJavaUtil) {
      sb.append(oImportJavaUtil.toString());
    }
    sb.append(System.getProperty("line.separator"));
    sb.append("public class Tarjan {");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("    private final Map<Macro, Macro> representativeMap = new HashMap<>();");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("    private final Map<Macro, Set<Macro>> memberMap = new LinkedHashMap<>();");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("    private final LinkedList<Macro> macros;");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("    private final Macro attemptedMacro;");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("    private final Map<Macro, NodeInfo> infoMap = new HashMap<>();");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("    private final LinkedList<Macro> stack = new LinkedList<>();");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("    private int time = 0;");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("    Tarjan(");
    sb.append(System.getProperty("line.separator"));
    sb.append("            Macro startingPoint,");
    sb.append(System.getProperty("line.separator"));
    sb.append("            Macro attemptedMacro){");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        this.attemptedMacro = attemptedMacro;");
    sb.append(System.getProperty("line.separator"));
    sb.append("        this.macros = new LinkedList<>(attemptedMacro.getChildren());");
    sb.append(System.getProperty("line.separator"));
    sb.append("        this.macros.add(attemptedMacro);");
    sb.append(System.getProperty("line.separator"));
    sb.append("        this.macros.add(startingPoint);");
    sb.append(System.getProperty("line.separator"));
    sb.append("    }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("    class NodeInfo{");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        int discoveryTime;");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        int lowestReachableDiscoveryTime;");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        boolean onStack;");
    sb.append(System.getProperty("line.separator"));
    sb.append("    }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("    void detectCycle(){");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        for(Macro macro : macros){");
    sb.append(System.getProperty("line.separator"));
    sb.append("            if(this.infoMap.get(macro) == null){");
    sb.append(System.getProperty("line.separator"));
    sb.append("                tarjan(macro);");
    sb.append(System.getProperty("line.separator"));
    sb.append("            }");
    sb.append(System.getProperty("line.separator"));
    sb.append("        }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        Macro representativeAttempted = this.representativeMap.get(this.attemptedMacro);");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        if(representativeAttempted != this.attemptedMacro){");
    sb.append(System.getProperty("line.separator"));
    sb.append("            throw ObjectMacroException.cyclicReference(this.attemptedMacro.toString());");
    sb.append(System.getProperty("line.separator"));
    sb.append("        }");
    sb.append(System.getProperty("line.separator"));
    sb.append("    }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("    void tarjan(");
    sb.append(System.getProperty("line.separator"));
    sb.append("            Macro macro){");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        NodeInfo nodeInfo = new NodeInfo();");
    sb.append(System.getProperty("line.separator"));
    sb.append("        nodeInfo.discoveryTime = this.time;");
    sb.append(System.getProperty("line.separator"));
    sb.append("        nodeInfo.lowestReachableDiscoveryTime = this.time;");
    sb.append(System.getProperty("line.separator"));
    sb.append("        nodeInfo.onStack = true;");
    sb.append(System.getProperty("line.separator"));
    sb.append("        this.infoMap.put(macro, nodeInfo);");
    sb.append(System.getProperty("line.separator"));
    sb.append("        this.stack.addFirst(macro);");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        this.time++;");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        for(Macro child : macro.getChildren()){");
    sb.append(System.getProperty("line.separator"));
    sb.append("            NodeInfo childInfo = this.infoMap.get(child);");
    sb.append(System.getProperty("line.separator"));
    sb.append("            if(childInfo == null || childInfo.onStack){");
    sb.append(System.getProperty("line.separator"));
    sb.append("                if(childInfo == null){");
    sb.append(System.getProperty("line.separator"));
    sb.append("                    tarjan(child);");
    sb.append(System.getProperty("line.separator"));
    sb.append("                    childInfo = this.infoMap.get(child);");
    sb.append(System.getProperty("line.separator"));
    sb.append("                }");
    sb.append(System.getProperty("line.separator"));
    sb.append("                nodeInfo.lowestReachableDiscoveryTime = Math.min(");
    sb.append(System.getProperty("line.separator"));
    sb.append("                        nodeInfo.lowestReachableDiscoveryTime,");
    sb.append(System.getProperty("line.separator"));
    sb.append("                        childInfo.lowestReachableDiscoveryTime);");
    sb.append(System.getProperty("line.separator"));
    sb.append("            }");
    sb.append(System.getProperty("line.separator"));
    sb.append("        }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        if(nodeInfo.lowestReachableDiscoveryTime == nodeInfo.discoveryTime){");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("            Macro member;");
    sb.append(System.getProperty("line.separator"));
    sb.append("            Set<Macro> members = new LinkedHashSet<>();");
    sb.append(System.getProperty("line.separator"));
    sb.append("            do {");
    sb.append(System.getProperty("line.separator"));
    sb.append("                member = this.stack.removeFirst();");
    sb.append(System.getProperty("line.separator"));
    sb.append("                NodeInfo memberInfo = this.infoMap.get(member);");
    sb.append(System.getProperty("line.separator"));
    sb.append("                memberInfo.onStack = false;");
    sb.append(System.getProperty("line.separator"));
    sb.append("                this.representativeMap.put(member, macro);");
    sb.append(System.getProperty("line.separator"));
    sb.append("                members.add(member);");
    sb.append(System.getProperty("line.separator"));
    sb.append("            }");
    sb.append(System.getProperty("line.separator"));
    sb.append("            while (member != macro);");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("            members = Collections.unmodifiableSet(members);");
    sb.append(System.getProperty("line.separator"));
    sb.append("            this.memberMap.put(macro, members);");
    sb.append(System.getProperty("line.separator"));
    sb.append("        }");
    sb.append(System.getProperty("line.separator"));
    sb.append("    }");
    sb.append(System.getProperty("line.separator"));
    sb.append("}");
    sb.append(System.getProperty("line.separator"));
    return sb.toString();
  }

}
