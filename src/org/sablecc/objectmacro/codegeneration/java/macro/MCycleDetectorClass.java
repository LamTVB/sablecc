/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;

import java.util.*;

public class MCycleDetectorClass {

  private final List<Object> ePackageDeclaration = new LinkedList<Object>();
  private final List<Object> eImportJavaUtil = new LinkedList<Object>();

  public MCycleDetectorClass() {
  }

  public MPackageDeclaration newPackageDeclaration(String pPackageName) {
    MPackageDeclaration lPackageDeclaration = new MPackageDeclaration(pPackageName);
    this.ePackageDeclaration.add(lPackageDeclaration);
    return lPackageDeclaration;
  }

  public MImportJavaUtil newImportJavaUtil() {
    MImportJavaUtil lImportJavaUtil = new MImportJavaUtil();
    this.eImportJavaUtil.add(lImportJavaUtil);
    return lImportJavaUtil;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(new MHeader().toString());
    for(Object oPackageDeclaration : this.ePackageDeclaration) {
      sb.append(oPackageDeclaration.toString());
    }
    if(this.eImportJavaUtil.size() > 0) {
      sb.append(System.getProperty("line.separator"));
    }
    for(Object oImportJavaUtil : this.eImportJavaUtil) {
      sb.append(oImportJavaUtil.toString());
    }
    sb.append(System.getProperty("line.separator"));
    sb.append("public class CycleDetector {");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("    private enum STATE {CYCLE, DELTA, NORMAL}");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("    class NodeInfo{");
    sb.append(System.getProperty("line.separator"));
    sb.append("        int level = 1;");
    sb.append(System.getProperty("line.separator"));
    sb.append("        List<NodeInfo> outgoing = new LinkedList<>();");
    sb.append(System.getProperty("line.separator"));
    sb.append("        List<NodeInfo> incoming = new LinkedList<>();");
    sb.append(System.getProperty("line.separator"));
    sb.append("    }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("    private Map<Macro, NodeInfo> nodes = new LinkedHashMap<>();");
    sb.append(System.getProperty("line.separator"));
    sb.append("    private List<NodeInfo> visitedBackward = new LinkedList<>();");
    sb.append(System.getProperty("line.separator"));
    sb.append("    private int nbVertices = 0;");
    sb.append(System.getProperty("line.separator"));
    sb.append("    private int nbArcs = 0;");
    sb.append(System.getProperty("line.separator"));
    sb.append("    private int delta;");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("    private NodeInfo getNodeInfo(");
    sb.append(System.getProperty("line.separator"));
    sb.append("                Macro macro){");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        NodeInfo nodeInfo = this.nodes.get(macro);");
    sb.append(System.getProperty("line.separator"));
    sb.append("        if(nodeInfo == null){");
    sb.append(System.getProperty("line.separator"));
    sb.append("            nodeInfo = new NodeInfo();");
    sb.append(System.getProperty("line.separator"));
    sb.append("            this.nbVertices++;");
    sb.append(System.getProperty("line.separator"));
    sb.append("            this.delta = Math.min((int) Math.pow(nbArcs, 1/2), (int)Math.pow(");
    sb.append(System.getProperty("line.separator"));
    sb.append("                    nbVertices, 2/3));");
    sb.append(System.getProperty("line.separator"));
    sb.append("            this.nodes.put(macro, nodeInfo);");
    sb.append(System.getProperty("line.separator"));
    sb.append("        }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        return nodeInfo;");
    sb.append(System.getProperty("line.separator"));
    sb.append("    }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("    public boolean addEdge(");
    sb.append(System.getProperty("line.separator"));
    sb.append("            Macro v,");
    sb.append(System.getProperty("line.separator"));
    sb.append("            Macro w){");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        NodeInfo vInfo = getNodeInfo(v);");
    sb.append(System.getProperty("line.separator"));
    sb.append("        NodeInfo wInfo = getNodeInfo(w);");
    sb.append(System.getProperty("line.separator"));
    sb.append("        this.visitedBackward = new LinkedList<>();");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        if(vInfo.level >= wInfo.level){");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("            STATE state = backwardSearch(vInfo, wInfo);");
    sb.append(System.getProperty("line.separator"));
    sb.append("            boolean step3 = false;");
    sb.append(System.getProperty("line.separator"));
    sb.append("            if(state.equals(STATE.NORMAL)");
    sb.append(System.getProperty("line.separator"));
    sb.append("                    && vInfo.level > wInfo.level){");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("                wInfo.level = vInfo.level;");
    sb.append(System.getProperty("line.separator"));
    sb.append("                wInfo.incoming.clear();");
    sb.append(System.getProperty("line.separator"));
    sb.append("                step3 = true;");
    sb.append(System.getProperty("line.separator"));
    sb.append("            }");
    sb.append(System.getProperty("line.separator"));
    sb.append("            else if(state.equals(STATE.DELTA)){");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("                wInfo.level = vInfo.level + 1;");
    sb.append(System.getProperty("line.separator"));
    sb.append("                this.visitedBackward.clear();");
    sb.append(System.getProperty("line.separator"));
    sb.append("                this.visitedBackward.add(vInfo);");
    sb.append(System.getProperty("line.separator"));
    sb.append("                wInfo.incoming.clear();");
    sb.append(System.getProperty("line.separator"));
    sb.append("                step3 = true;");
    sb.append(System.getProperty("line.separator"));
    sb.append("            }");
    sb.append(System.getProperty("line.separator"));
    sb.append("            else if(state.equals(STATE.CYCLE)){");
    sb.append(System.getProperty("line.separator"));
    sb.append("                // throw ObjectMacroException.cyclicReference(v.getClass().getSimpleName());");
    sb.append(System.getProperty("line.separator"));
    sb.append("                return true;");
    sb.append(System.getProperty("line.separator"));
    sb.append("            }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("            if(step3 && forwardSearch(wInfo).equals(STATE.CYCLE)){");
    sb.append(System.getProperty("line.separator"));
    sb.append("                // throw ObjectMacroException.cyclicReference(v.getClass().getSimpleName());");
    sb.append(System.getProperty("line.separator"));
    sb.append("                return true;");
    sb.append(System.getProperty("line.separator"));
    sb.append("            }");
    sb.append(System.getProperty("line.separator"));
    sb.append("        }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        vInfo.outgoing.add(wInfo);");
    sb.append(System.getProperty("line.separator"));
    sb.append("        if(vInfo.level == wInfo.level){");
    sb.append(System.getProperty("line.separator"));
    sb.append("            wInfo.incoming.add(vInfo);");
    sb.append(System.getProperty("line.separator"));
    sb.append("        }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        this.nbArcs++;");
    sb.append(System.getProperty("line.separator"));
    sb.append("        this.delta = Math.min((int) Math.pow(this.nbArcs, 1/2), (int)Math.pow(this.nbVertices, 2/3));");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        return false;");
    sb.append(System.getProperty("line.separator"));
    sb.append("    }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("    private STATE backwardSearch(");
    sb.append(System.getProperty("line.separator"));
    sb.append("            NodeInfo v,");
    sb.append(System.getProperty("line.separator"));
    sb.append("            NodeInfo w){");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        int nbVisited = 0;");
    sb.append(System.getProperty("line.separator"));
    sb.append("        for(NodeInfo inNode : v.incoming){");
    sb.append(System.getProperty("line.separator"));
    sb.append("            if(inNode.equals(w)){");
    sb.append(System.getProperty("line.separator"));
    sb.append("                return STATE.CYCLE;");
    sb.append(System.getProperty("line.separator"));
    sb.append("            }");
    sb.append(System.getProperty("line.separator"));
    sb.append("            nbVisited++;");
    sb.append(System.getProperty("line.separator"));
    sb.append("            if(nbVisited >= this.delta){");
    sb.append(System.getProperty("line.separator"));
    sb.append("                return STATE.DELTA;");
    sb.append(System.getProperty("line.separator"));
    sb.append("            }");
    sb.append(System.getProperty("line.separator"));
    sb.append("            this.visitedBackward.add(inNode);");
    sb.append(System.getProperty("line.separator"));
    sb.append("        }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        this.visitedBackward.add(v);");
    sb.append(System.getProperty("line.separator"));
    sb.append("        return STATE.NORMAL;");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("    }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("    private STATE forwardSearch(");
    sb.append(System.getProperty("line.separator"));
    sb.append("            NodeInfo x){");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        for(NodeInfo y : x.outgoing){");
    sb.append(System.getProperty("line.separator"));
    sb.append("            if(this.visitedBackward.contains(y)){");
    sb.append(System.getProperty("line.separator"));
    sb.append("                return STATE.CYCLE;");
    sb.append(System.getProperty("line.separator"));
    sb.append("            }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("            if(x.level == y.level){");
    sb.append(System.getProperty("line.separator"));
    sb.append("                y.incoming.add(x);");
    sb.append(System.getProperty("line.separator"));
    sb.append("            }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("            if(x.level > y.level){");
    sb.append(System.getProperty("line.separator"));
    sb.append("                y.level =");
    sb.append(System.getProperty("line.separator"));
    sb.append("                        x.level;");
    sb.append(System.getProperty("line.separator"));
    sb.append("                y.incoming.clear();");
    sb.append(System.getProperty("line.separator"));
    sb.append("                y.incoming.add(x);");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("                if(forwardSearch(y).equals(STATE.CYCLE)){");
    sb.append(System.getProperty("line.separator"));
    sb.append("                    return STATE.CYCLE;");
    sb.append(System.getProperty("line.separator"));
    sb.append("                }");
    sb.append(System.getProperty("line.separator"));
    sb.append("            }");
    sb.append(System.getProperty("line.separator"));
    sb.append("        }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        return STATE.NORMAL;");
    sb.append(System.getProperty("line.separator"));
    sb.append("    }");
    sb.append(System.getProperty("line.separator"));
    sb.append("}");
    sb.append(System.getProperty("line.separator"));
    return sb.toString();
  }

}
