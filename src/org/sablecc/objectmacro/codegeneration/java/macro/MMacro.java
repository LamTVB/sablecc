/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;

import java.util.*;

public class MMacro {

  private final String pName;
  private final MMacro mMacro = this;
  private final List<Object> ePackageDeclaration = new LinkedList<Object>();
  private final List<Object> eImportJavaUtil = new LinkedList<Object>();
  private final List<Object> eParamMacroField_ParamStringField_InternalMacroField_InternalStringField = new LinkedList<Object>();
  private final List<Object> eContextField = new LinkedList<Object>();
  private final List<Object> eConstructor = new LinkedList<Object>();
  private final List<Object> eParamStringSetter_ParamMacroSetter_InternalStringSetter_InternalMacroSetter = new LinkedList<Object>();
  private final List<Object> eParamStringRefBuilder_ParamMacroRefBuilder = new LinkedList<Object>();
  private final List<Object> eParamStringRef_ParamMacroRef = new LinkedList<Object>();
  private final List<Object> eInitInternalsMethod = new LinkedList<Object>();
  private final List<Object> eRedefinedApplyInitializer = new LinkedList<Object>();
  private final List<Object> eMacroBuilder = new LinkedList<Object>();
  private final List<Object> eEmptyBuilderWithContext = new LinkedList<Object>();

  public MMacro(String pName) {
    if(pName == null) throw new NullPointerException();
    this.pName = pName;
  }

  public MPackageDeclaration newPackageDeclaration(String pPackageName) {
    MPackageDeclaration lPackageDeclaration = new MPackageDeclaration(pPackageName);
    this.ePackageDeclaration.add(lPackageDeclaration);
    return lPackageDeclaration;
  }

  public MImportJavaUtil newImportJavaUtil() {
    MImportJavaUtil lImportJavaUtil = new MImportJavaUtil();
    this.eImportJavaUtil.add(lImportJavaUtil);
    return lImportJavaUtil;
  }

  public MParamMacroField newParamMacroField(String pName) {
    MParamMacroField lParamMacroField = new MParamMacroField(pName);
    this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField.add(lParamMacroField);
    return lParamMacroField;
  }

  public MParamStringField newParamStringField(String pName) {
    MParamStringField lParamStringField = new MParamStringField(pName);
    this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField.add(lParamStringField);
    return lParamStringField;
  }

  public MInternalMacroField newInternalMacroField(String pName) {
    MInternalMacroField lInternalMacroField = new MInternalMacroField(pName);
    this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField.add(lInternalMacroField);
    return lInternalMacroField;
  }

  public MInternalStringField newInternalStringField(String pName) {
    MInternalStringField lInternalStringField = new MInternalStringField(pName);
    this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField.add(lInternalStringField);
    return lInternalStringField;
  }

  public MContextField newContextField(String pName) {
    MContextField lContextField = new MContextField(pName);
    this.eContextField.add(lContextField);
    return lContextField;
  }

  public MConstructor newConstructor(String pName) {
    MConstructor lConstructor = new MConstructor(pName);
    this.eConstructor.add(lConstructor);
    return lConstructor;
  }

  public MParamStringSetter newParamStringSetter(String pName) {
    MParamStringSetter lParamStringSetter = new MParamStringSetter(pName);
    this.eParamStringSetter_ParamMacroSetter_InternalStringSetter_InternalMacroSetter.add(lParamStringSetter);
    return lParamStringSetter;
  }

  public MParamMacroSetter newParamMacroSetter(String pParamName, String pMacroName) {
    MParamMacroSetter lParamMacroSetter = new MParamMacroSetter(pParamName, pMacroName);
    this.eParamStringSetter_ParamMacroSetter_InternalStringSetter_InternalMacroSetter.add(lParamMacroSetter);
    return lParamMacroSetter;
  }

  public MInternalStringSetter newInternalStringSetter(String pName) {
    MInternalStringSetter lInternalStringSetter = new MInternalStringSetter(pName);
    this.eParamStringSetter_ParamMacroSetter_InternalStringSetter_InternalMacroSetter.add(lInternalStringSetter);
    return lInternalStringSetter;
  }

  public MInternalMacroSetter newInternalMacroSetter(String pParamName) {
    MInternalMacroSetter lInternalMacroSetter = new MInternalMacroSetter(pParamName);
    this.eParamStringSetter_ParamMacroSetter_InternalStringSetter_InternalMacroSetter.add(lInternalMacroSetter);
    return lInternalMacroSetter;
  }

  public MParamStringRefBuilder newParamStringRefBuilder(String pName) {
    MParamStringRefBuilder lParamStringRefBuilder = new MParamStringRefBuilder(pName);
    this.eParamStringRefBuilder_ParamMacroRefBuilder.add(lParamStringRefBuilder);
    return lParamStringRefBuilder;
  }

  public MParamMacroRefBuilder newParamMacroRefBuilder(String pName, String pIndexBuilder) {
    MParamMacroRefBuilder lParamMacroRefBuilder = new MParamMacroRefBuilder(pName, pIndexBuilder);
    this.eParamStringRefBuilder_ParamMacroRefBuilder.add(lParamMacroRefBuilder);
    return lParamMacroRefBuilder;
  }

  public MParamStringRef newParamStringRef(String pName) {
    MParamStringRef lParamStringRef = new MParamStringRef(pName);
    this.eParamStringRef_ParamMacroRef.add(lParamStringRef);
    return lParamStringRef;
  }

  public MParamMacroRef newParamMacroRef(String pName) {
    MParamMacroRef lParamMacroRef = new MParamMacroRef(pName);
    this.eParamStringRef_ParamMacroRef.add(lParamMacroRef);
    return lParamMacroRef;
  }

  public MInitInternalsMethod newInitInternalsMethod(String pName) {
    MInitInternalsMethod lInitInternalsMethod = new MInitInternalsMethod(pName);
    this.eInitInternalsMethod.add(lInitInternalsMethod);
    return lInitInternalsMethod;
  }

  public MRedefinedApplyInitializer newRedefinedApplyInitializer(String pName) {
    MRedefinedApplyInitializer lRedefinedApplyInitializer = new MRedefinedApplyInitializer(pName);
    this.eRedefinedApplyInitializer.add(lRedefinedApplyInitializer);
    return lRedefinedApplyInitializer;
  }

  public MMacroBuilder newMacroBuilder() {
    MMacroBuilder lMacroBuilder = new MMacroBuilder();
    this.eMacroBuilder.add(lMacroBuilder);
    return lMacroBuilder;
  }

  public MEmptyBuilderWithContext newEmptyBuilderWithContext() {
    MEmptyBuilderWithContext lEmptyBuilderWithContext = new MEmptyBuilderWithContext();
    this.eEmptyBuilderWithContext.add(lEmptyBuilderWithContext);
    return lEmptyBuilderWithContext;
  }

  String pName() {
    return this.pName;
  }

  private String rName() {
    return this.mMacro.pName();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(new MHeader().toString());
    if(this.ePackageDeclaration.size() > 0) {
      sb.append(System.getProperty("line.separator"));
    }
    for(Object oPackageDeclaration : this.ePackageDeclaration) {
      sb.append(oPackageDeclaration.toString());
    }
    if(this.eImportJavaUtil.size() > 0) {
      sb.append(System.getProperty("line.separator"));
    }
    for(Object oImportJavaUtil : this.eImportJavaUtil) {
      sb.append(oImportJavaUtil.toString());
    }
    sb.append(System.getProperty("line.separator"));
    sb.append("public class M");
    sb.append(rName());
    sb.append(" extends Macro{");
    sb.append(System.getProperty("line.separator"));
    if(this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField.size() > 0) {
      sb.append(System.getProperty("line.separator"));
    }
    {
      boolean first = true;
      for(Object oParamMacroField_ParamStringField_InternalMacroField_InternalStringField : this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField) {
        if(first) {
          first = false;
        }
        else {
          sb.append(System.getProperty("line.separator"));
        }
        sb.append(oParamMacroField_ParamStringField_InternalMacroField_InternalStringField.toString());
      }
    }
    if(this.eContextField.size() > 0) {
      sb.append(System.getProperty("line.separator"));
    }
    for(Object oContextField : this.eContextField) {
      sb.append(oContextField.toString());
    }
    if(this.eConstructor.size() > 0) {
      sb.append(System.getProperty("line.separator"));
    }
    for(Object oConstructor : this.eConstructor) {
      sb.append(oConstructor.toString());
    }
    if(this.eParamStringSetter_ParamMacroSetter_InternalStringSetter_InternalMacroSetter.size() > 0) {
      sb.append(System.getProperty("line.separator"));
    }
    {
      boolean first = true;
      for(Object oParamStringSetter_ParamMacroSetter_InternalStringSetter_InternalMacroSetter : this.eParamStringSetter_ParamMacroSetter_InternalStringSetter_InternalMacroSetter) {
        if(first) {
          first = false;
        }
        else {
          sb.append(System.getProperty("line.separator"));
        }
        sb.append(oParamStringSetter_ParamMacroSetter_InternalStringSetter_InternalMacroSetter.toString());
      }
    }
    if(this.eParamStringRefBuilder_ParamMacroRefBuilder.size() > 0) {
      sb.append(System.getProperty("line.separator"));
    }
    {
      boolean first = true;
      for(Object oParamStringRefBuilder_ParamMacroRefBuilder : this.eParamStringRefBuilder_ParamMacroRefBuilder) {
        if(first) {
          first = false;
        }
        else {
          sb.append(System.getProperty("line.separator"));
        }
        sb.append(oParamStringRefBuilder_ParamMacroRefBuilder.toString());
      }
    }
    if(this.eParamStringRef_ParamMacroRef.size() > 0) {
      sb.append(System.getProperty("line.separator"));
    }
    {
      boolean first = true;
      for(Object oParamStringRef_ParamMacroRef : this.eParamStringRef_ParamMacroRef) {
        if(first) {
          first = false;
        }
        else {
          sb.append(System.getProperty("line.separator"));
        }
        sb.append(oParamStringRef_ParamMacroRef.toString());
      }
    }
    {
      boolean first = true;
      for(Object oInitInternalsMethod : this.eInitInternalsMethod) {
        if(first) {
          first = false;
        }
        else {
          sb.append(System.getProperty("line.separator"));
        }
        sb.append(oInitInternalsMethod.toString());
      }
    }
    sb.append(System.getProperty("line.separator"));
    for(Object oRedefinedApplyInitializer : this.eRedefinedApplyInitializer) {
      sb.append(oRedefinedApplyInitializer.toString());
    }
    if(this.eMacroBuilder.size() > 0) {
      sb.append(System.getProperty("line.separator"));
    }
    for(Object oMacroBuilder : this.eMacroBuilder) {
      sb.append(oMacroBuilder.toString());
    }
    if(this.eEmptyBuilderWithContext.size() > 0) {
      sb.append(System.getProperty("line.separator"));
    }
    for(Object oEmptyBuilderWithContext : this.eEmptyBuilderWithContext) {
      sb.append(oEmptyBuilderWithContext.toString());
    }
    sb.append("}");
    sb.append(System.getProperty("line.separator"));
    return sb.toString();
  }

}
